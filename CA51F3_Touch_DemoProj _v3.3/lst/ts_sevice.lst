C51 COMPILER V9.51   TS_SEVICE                                                             11/14/2019 09:54:16 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE TS_SEVICE
OBJECT MODULE PLACED IN .\hex\ts_sevice.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE TS_Lib\Sources\ts_sevice.c OMF2 OPTIMIZE(9,SIZE) BROWSE DEBUG PRINT(.\lst\t
                    -s_sevice.lst) TABS(2) OBJECT(.\hex\ts_sevice.obj)

line level    source

   1          #ifndef TS_SERVICE_C
   2          #define TS_SERVICE_C
   3          /*********************************************************************************************************
             -************/
   4          #include "ca51f_config.h"
   5          #include "includes\ca51f3sfr.h"
   6          #include "includes\ca51f3xsfr.h"
   7          #include "includes\gpiodef_f3.h"
   8          #include "Library\includes\uart.h"
   9          /*********************************************************************************************************
             -************/
  10          #include "TS_Lib\Includes\ts_def.h"
  11          #include "TS_Lib\Includes\ts_api.h"
  12          #include "TS_Lib\Includes\ts_service.h"     
  13          /*********************************************************************************************************
             -************/
  14          code unsigned char *pXSFR[]=
  15          {
  16            &P10F,
  17            &P11F,
  18            &P12F,
  19            &P13F,
  20            &P14F,
  21            &P15F,
  22            &P16F,
  23            &P17F,
  24            &P37F,
  25            &P36F,
  26            &P35F,
  27            &P34F,
  28            &P07F,
  29            &P06F,
  30            &P05F,
  31            &P04F,
  32            &P03F,
  33            &P02F,
  34            &P01F,
  35            &P00F,
  36          };
  37          void TS_IO_init(void)
  38          {
  39   1        unsigned char i;
  40   1        unsigned char *pPinS;
  41   1        GPIO_Init(P21F,P21_CAP_SETTING);
  42   1        for(i = 0; i < TS_Cnt; i++)
  43   1        {
  44   2          pPinS = pXSFR[TS_CH[i]];
  45   2          *pPinS = 4;
  46   2        }
  47   1      }
  48          void TS_ScanStart(void)
  49          { 
  50   1        unsigned char i,j;  
  51   1        for(i = 0; i < 6; i++)          
C51 COMPILER V9.51   TS_SEVICE                                                             11/14/2019 09:54:16 PAGE 2   

  52   1        {
  53   2          if(TS_Index + i >= TS_Cnt)
  54   2          {
  55   3            INDEX = i;
  56   3            TKCHS = MPOL(0) | NPOL(1) | TKCHS(21);
  57   3            for(j = i+1; j < 6; j++)
  58   3            {
  59   4              INDEX = j;
  60   4              TKCHS = MPOL(0) | NPOL(1) | TKCHS(0); 
  61   4            }
  62   3            break;
  63   3          }
  64   2          INDEX = i;
  65   2          TKCHS = MPOL(0) | NPOL(1) | TKCHS((TS_CH[TS_Index+i])+1); 
  66   2        }
  67   1        TKCON |= TKST(1); 
  68   1      }
  69          unsigned char TS_GetDataArea(unsigned char ts_ch,unsigned int ts_data,int NoiseThd,bit key_pressed_flag)
  70          {
  71   1        int Delta;
  72   1        int FingerThd;
  73   1        
  74   1        Delta     = (int)TS_BaseLineData[ts_ch] - (int)ts_data;
  75   1        FingerThd = TSKey_FingerThd[ts_ch];   
  76   1        
  77   1        if(key_pressed_flag)
  78   1        {
  79   2          FingerThd = (FingerThd*9)/10; 
  80   2        }
  81   1        
  82   1        if(Delta >= FingerThd)      return AREA_FINGER_TOUCH; 
  83   1        else if(Delta > NoiseThd)   return AREA_PNOISE_PLUS; 
  84   1        else if(Delta >= 0)         return AREA_PNOISE;
  85   1        else if(Delta >= -NoiseThd) return AREA_NNOISE;
  86   1        else                        return AREA_OVER_LOW;
  87   1      }
  88          unsigned char TS_AreaDeviateDetection(unsigned int cmp_data,unsigned int real_data,int range)
  89          { 
  90   1        int Delta;
  91   1        Delta   = (int)cmp_data - (int)real_data;
  92   1        if((Delta <= range) && (Delta >= -range))
  93   1        {
  94   2          return 1;
  95   2        }
  96   1        else
  97   1        {
  98   2          return 0; 
  99   2        }   
 100   1      }
 101          void TS_BaseLineForceUpdate(void)
 102          {
 103   1        unsigned char i;
 104   1      
 105   1        for(i = 0; i < TS_Cnt; i++)
 106   1        {
 107   2          TS_FirstAreaData[i] = TS_PostData[i];
 108   2          TS_BaseLineData[i]  = TS_PostData[i];
 109   2          TS_AreaConfirmTimerSet(i,AREA_PNOISE);            
 110   2        } 
 111   1      }
 112          
 113          void TS_AreaConfirmTimerSet(unsigned char ts_ch, unsigned char area)
C51 COMPILER V9.51   TS_SEVICE                                                             11/14/2019 09:54:16 PAGE 3   

 114          {
 115   1        TS_AreaConfirmTimer[ts_ch] = AREA_CONFIRM_TIME_TAB[area];
 116   1      }
 117          void SetWheelSliderRefCh(unsigned char Slider_Cnt)
 118          {
 119   1        unsigned char i,j;
 120   1        unsigned int MinVal;
 121   1        MinVal = 0xFFFF;
 122   1        for(i = TS_BaseCh,j=0; i < TS_BaseCh + Slider_Cnt; i++,j++)
 123   1        {
 124   2          if(TS_BaseLineData[i] < MinVal)
 125   2          {
 126   3            WheelSliderRefCh = j;
 127   3            MinVal = TS_BaseLineData[i];
 128   3          }
 129   2        }
 130   1      }
 131          
 132          #define WHEEL_SLIDER_POSITION_FILTER_COUNT        4     
 133          int WheelTouchJudge(unsigned char WHEEL_SLIDER0_CH_COUNT_V,unsigned int WHEEL_SLIDER0_TOUCH_THD_V)
 134          {
 135   1        unsigned char i;
 136   1        unsigned long int CalcTemp1;
 137   1        unsigned int CalcTemp2,CalcTemp3;
 138   1        unsigned char DeltaRate;
 139   1        int  Delta;
 140   1        unsigned int  MaxDelta1,MaxDelta2/*,MaxDelta3*/;
 141   1        unsigned char Maxidx1,Maxidx2/*,Maxidx3*/;
 142   1        int Position,PosOffset;
 143   1      
 144   1        MaxDelta1 = MaxDelta2 = /*MaxDelta3 =*/ 0;
 145   1        for(i = 0; i < WHEEL_SLIDER0_CH_COUNT_V; i++) 
 146   1        { 
 147   2          if(i == WheelSliderRefCh)   
 148   2          {
 149   3            Delta     =   (int)TS_BaseLineData[TS_BaseCh + WheelSliderRefCh] - (int)TS_PostData[TS_BaseCh + WheelSlide
             -rRefCh];  
 150   3          }
 151   2          else
 152   2          {
 153   3            CalcTemp1 =   (unsigned long int)TS_PostData[TS_BaseCh + i] * (unsigned long int)TS_BaseLineData[TS_Base
             -Ch + WheelSliderRefCh];
 154   3            CalcTemp2 =   (unsigned int)(CalcTemp1/TS_BaseLineData[TS_BaseCh + i]);
 155   3            CalcTemp3 =   TS_PostData[TS_BaseCh + i] + TS_BaseLineData[TS_BaseCh + WheelSliderRefCh] - CalcTemp2;
 156   3            CalcTemp2 =   (unsigned int)(CalcTemp1/CalcTemp3);  
 157   3            Delta     =   (int)TS_BaseLineData[TS_BaseCh + WheelSliderRefCh] - (int)CalcTemp2;          
 158   3          }
 159   2          if(Delta < 0) Delta = 0;
 160   2        
 161   2          
 162   2          if(Delta > MaxDelta1)
 163   2          {
 164   3      //      Maxidx3 = Maxidx2;  MaxDelta3 = MaxDelta2;
 165   3            Maxidx2 = Maxidx1;  MaxDelta2 = MaxDelta1;
 166   3            Maxidx1 = i;        MaxDelta1 = Delta;
 167   3          }
 168   2          else if(Delta > MaxDelta2)
 169   2          {
 170   3      //      Maxidx3 = Maxidx2;  MaxDelta3 = MaxDelta2;
 171   3            Maxidx2 = i;        MaxDelta2 = Delta;
 172   3          }
 173   2      //    else if(Delta > MaxDelta3)
C51 COMPILER V9.51   TS_SEVICE                                                             11/14/2019 09:54:16 PAGE 4   

 174   2      //    {
 175   2      //      Maxidx3 = i;        MaxDelta3 = Delta;
 176   2      //    }
 177   2        }
 178   1      
 179   1        if((MaxDelta1 + MaxDelta2) < WHEEL_SLIDER0_TOUCH_THD_V)
 180   1        {
 181   2          return -1;
 182   2        }   
 183   1      
 184   1        Delta = MaxDelta1 - (WHEEL_SLIDER0_TOUCH_THD_V>>1);
 185   1        DeltaRate = (Delta*10)/MaxDelta1;
 186   1        if(DeltaRate > 31) DeltaRate = 31;
 187   1        
 188   1        CalcTemp2 = ((unsigned int)WHEEL_SLIDER0_TOUCH_THD_V*(32-DeltaRate))>>6;
 189   1        
 190   1        MaxDelta1 += CalcTemp2;
 191   1        MaxDelta2 += CalcTemp2;   
 192   1      
 193   1        DeltaRate = ((unsigned int)MaxDelta2<<7)/MaxDelta1;
 194   1        if(WheelSliderCapRateFilter == 0)
 195   1        {
 196   2          WheelSliderCapRateFilter = DeltaRate*WHEEL_SLIDER_POSITION_FILTER_COUNT;
 197   2        }
 198   1        else
 199   1        {
 200   2          WheelSliderCapRateFilter -= WheelSliderCapRateFilter/WHEEL_SLIDER_POSITION_FILTER_COUNT;
 201   2          WheelSliderCapRateFilter += DeltaRate;  
 202   2        }
 203   1        DeltaRate = WheelSliderCapRateFilter/WHEEL_SLIDER_POSITION_FILTER_COUNT;
 204   1        WheelSliderMaxIdx = Maxidx1;
 205   1        
 206   1        {
 207   2          bit dir_flag;
 208   2          Position = Maxidx1*64;
 209   2          if(DeltaRate < WHEEL_SLIDER0_MAX_MIN_TAB[Maxidx1]) DeltaRate = WHEEL_SLIDER0_MAX_MIN_TAB[Maxidx1];
 210   2          PosOffset = ((DeltaRate - WHEEL_SLIDER0_MAX_MIN_TAB[Maxidx1])*32)/(128-WHEEL_SLIDER0_MAX_MIN_TAB[Maxidx1
             -]);
 211   2          
 212   2          if((Maxidx1 == 0) && (Maxidx2 == (WHEEL_SLIDER0_CH_COUNT_V-1))) dir_flag = 0;
 213   2          else if((Maxidx1 == (WHEEL_SLIDER0_CH_COUNT_V-1)) && (Maxidx2 == 0)) dir_flag = 1;
 214   2          else if(Maxidx1 < Maxidx2) dir_flag = 1;
 215   2          else dir_flag = 0;
 216   2          
 217   2          if(dir_flag)
 218   2          {
 219   3            Position += PosOffset;
 220   3          }
 221   2          else
 222   2          {
 223   3            if(Position == 0)
 224   3            {
 225   4              Position = WHEEL_SLIDER0_CH_COUNT_V*64-1;
 226   4            }
 227   3            Position -= PosOffset;
 228   3          }
 229   2        }
 230   1        return Position;
 231   1      }
 232          int SliderTouchJudge(unsigned char WHEEL_SLIDER0_CH_COUNT_V,unsigned int WHEEL_SLIDER0_TOUCH_THD_V)
 233          {
 234   1        unsigned char i;
C51 COMPILER V9.51   TS_SEVICE                                                             11/14/2019 09:54:16 PAGE 5   

 235   1        unsigned long int CalcTemp1;
 236   1        unsigned int CalcTemp2,CalcTemp3;
 237   1        unsigned char DeltaRate;
 238   1        int  Delta;
 239   1        unsigned int  MaxDelta1,MaxDelta2/*,MaxDelta3*/;
 240   1        unsigned char Maxidx1,Maxidx2/*,Maxidx3*/;
 241   1        int Position,PosOffset;
 242   1      
 243   1        MaxDelta1 = MaxDelta2 = /*MaxDelta3 =*/ 0;
 244   1        for(i = 0; i < WHEEL_SLIDER0_CH_COUNT_V; i++) 
 245   1        { 
 246   2          if(i == WheelSliderRefCh)   
 247   2          {
 248   3            Delta     =   (int)TS_BaseLineData[TS_BaseCh + WheelSliderRefCh] - (int)TS_PostData[TS_BaseCh + WheelSlide
             -rRefCh];  
 249   3          }
 250   2          else
 251   2          {
 252   3            CalcTemp1 =   (unsigned long int)TS_PostData[TS_BaseCh + i] * (unsigned long int)TS_BaseLineData[TS_Base
             -Ch + WheelSliderRefCh];
 253   3            CalcTemp2 =   (unsigned int)(CalcTemp1/TS_BaseLineData[TS_BaseCh + i]);
 254   3            CalcTemp3 =   TS_PostData[TS_BaseCh + i] + TS_BaseLineData[TS_BaseCh + WheelSliderRefCh] - CalcTemp2;
 255   3            CalcTemp2 =   (unsigned int)(CalcTemp1/CalcTemp3);  
 256   3            Delta     =   (int)TS_BaseLineData[TS_BaseCh + WheelSliderRefCh] - (int)CalcTemp2;          
 257   3          }
 258   2          if(Delta < 0) Delta = 0;
 259   2        
 260   2          
 261   2          if(Delta > MaxDelta1)
 262   2          {
 263   3      //      Maxidx3 = Maxidx2;  MaxDelta3 = MaxDelta2;
 264   3            Maxidx2 = Maxidx1;  MaxDelta2 = MaxDelta1;
 265   3            Maxidx1 = i;        MaxDelta1 = Delta;
 266   3          }
 267   2          else if(Delta > MaxDelta2)
 268   2          {
 269   3      //      Maxidx3 = Maxidx2;  MaxDelta3 = MaxDelta2;
 270   3            Maxidx2 = i;        MaxDelta2 = Delta;
 271   3          }
 272   2      //    else if(Delta > MaxDelta3)
 273   2      //    {
 274   2      //      Maxidx3 = i;        MaxDelta3 = Delta;
 275   2      //    }
 276   2        }
 277   1        if(((Maxidx1 == 0)||(Maxidx1 == (WHEEL_SLIDER0_CH_COUNT_V-1))))
 278   1        {
 279   2          if((MaxDelta1) < (WHEEL_SLIDER0_TOUCH_THD_V>>1))
 280   2          {
 281   3            return -1;
 282   3          }
 283   2        }
 284   1        else
 285   1        {
 286   2          if((MaxDelta1 + MaxDelta2) < WHEEL_SLIDER0_TOUCH_THD_V)
 287   2          {
 288   3            return -1;
 289   3          }   
 290   2        }
 291   1      
 292   1        Delta = MaxDelta1 - (WHEEL_SLIDER0_TOUCH_THD_V>>1);
 293   1        DeltaRate = (Delta*10)/MaxDelta1;
 294   1        if(DeltaRate > 31) DeltaRate = 31;
C51 COMPILER V9.51   TS_SEVICE                                                             11/14/2019 09:54:16 PAGE 6   

 295   1        
 296   1        CalcTemp2 = ((unsigned int)WHEEL_SLIDER0_TOUCH_THD_V*(32-DeltaRate))>>6;
 297   1        
 298   1        MaxDelta1 += CalcTemp2;
 299   1        MaxDelta2 += CalcTemp2;   
 300   1      
 301   1        DeltaRate = ((unsigned int)MaxDelta2<<7)/MaxDelta1;
 302   1        if(WheelSliderCapRateFilter == 0)
 303   1        {
 304   2          WheelSliderCapRateFilter = DeltaRate*WHEEL_SLIDER_POSITION_FILTER_COUNT;
 305   2        }
 306   1        else
 307   1        {
 308   2          WheelSliderCapRateFilter -= WheelSliderCapRateFilter/WHEEL_SLIDER_POSITION_FILTER_COUNT;
 309   2          WheelSliderCapRateFilter += DeltaRate;  
 310   2        }
 311   1        DeltaRate = WheelSliderCapRateFilter/WHEEL_SLIDER_POSITION_FILTER_COUNT;
 312   1        WheelSliderMaxIdx = Maxidx1;
 313   1        
 314   1        Position = Maxidx1*64;
 315   1        if(Maxidx1 == 0)
 316   1        {
 317   2          if(DeltaRate < WHEEL_SLIDER0_MAX_MIN_TAB[0])
 318   2          {
 319   3            DeltaRate = WHEEL_SLIDER0_MAX_MIN_TAB[0];
 320   3          }
 321   2          Position = ((DeltaRate - WHEEL_SLIDER0_MAX_MIN_TAB[0])*32)/(128-WHEEL_SLIDER0_MAX_MIN_TAB[0]);
 322   2        }
 323   1        else if(Maxidx1 == (WHEEL_SLIDER0_CH_COUNT_V-1))
 324   1        {
 325   2          if(DeltaRate < WHEEL_SLIDER0_MAX_MIN_TAB[WHEEL_SLIDER0_CH_COUNT_V-1])
 326   2          {
 327   3            DeltaRate = WHEEL_SLIDER0_MAX_MIN_TAB[WHEEL_SLIDER0_CH_COUNT_V-1];
 328   3          }
 329   2          Position -= ((DeltaRate - WHEEL_SLIDER0_MAX_MIN_TAB[WHEEL_SLIDER0_CH_COUNT_V-1])*32)/(128-WHEEL_SLIDER0_
             -MAX_MIN_TAB[WHEEL_SLIDER0_CH_COUNT_V-1]);
 330   2        }
 331   1        else
 332   1        {
 333   2          if(DeltaRate < WHEEL_SLIDER0_MAX_MIN_TAB[Maxidx1]) DeltaRate = WHEEL_SLIDER0_MAX_MIN_TAB[Maxidx1];
 334   2          PosOffset = ((DeltaRate - WHEEL_SLIDER0_MAX_MIN_TAB[Maxidx1])*32)/(128-WHEEL_SLIDER0_MAX_MIN_TAB[Maxidx1
             -]);
 335   2          if(Maxidx1 < Maxidx2)
 336   2          {
 337   3            Position += PosOffset;
 338   3          }
 339   2          else
 340   2          {
 341   3            Position -= PosOffset;
 342   3          }
 343   2        }
 344   1        return Position;
 345   1      }
 346          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1796    ----
   CONSTANT SIZE    =     60    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      45
C51 COMPILER V9.51   TS_SEVICE                                                             11/14/2019 09:54:16 PAGE 7   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
