C51 COMPILER V9.51   UART                                                                  05/17/2019 10:28:03 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\output\uart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\uart.c OMF2 BROWSE DEBUG PRINT(.\lst\uart.lst) TABS(2) OBJECT(.\outp
                    -ut\uart.obj)

line level    source

   1          #ifndef _UART_C_
   2          #define _UART_C_
   3          #include "include/ca51f_config.h"
   4          #include "include/ca51f3sfr.h"
   5          #include "include/ca51f3xsfr.h"
   6          #include "include/gpiodef_f3.h"
   7          
   8          #include "include/uart.h"
   9          #include <intrins.h>
  10          #include <string.h>
  11          #include <stdarg.h>
  12          #include <stdlib.h>
  13          #include <stdio.h>
  14          #include <absacc.h>
  15          /*********************************************************************************************************
             -************/
  16          /*********************************************************************************************************
             -************/
  17          #ifdef UART0_EN
  18          void Uart0_Initial(unsigned long int baudrate)
  19          {
  20   1        unsigned int value_temp;
  21   1      
  22   1        P31F = P31_UART0_RX_SETTING;
  23   1        P30F = P30_UART0_TX_SETTING;
  24   1        
  25   1        uart0_send.head=0;
  26   1        uart0_send.tail=0;
  27   1        uart0_rev.head=0;
  28   1        uart0_rev.tail=0;
  29   1        uart0_tx_flag=0;
  30   1      
  31   1      /*********************************************************************************************************
             -***************/
  32   1      //TIMER2作为UART0的波特率发生器
  33   1        value_temp = 0x10000 - FOSC/(baudrate*32);
  34   1        T2CON =   0x24;
  35   1        T2CH  =   (unsigned char)(value_temp>>8);
  36   1        T2CL  =   (unsigned char)(value_temp);
  37   1        TH2   =   (unsigned char)(value_temp>>8);
  38   1        TL2   =   (unsigned char)(value_temp);; 
  39   1        TR2   =   1;
  40   1      /*********************************************************************************************************
             -***************/  
  41   1      
  42   1      
  43   1      /*********************************************************************************************************
             -***************/
  44   1      //TIMER1作为UART0的波特率发生器
  45   1      
  46   1      //  TMOD = (TMOD&0xCF)|0x20;
  47   1      //  TH1 = 0xff;   //19200
  48   1      //  TL1 = 0xff;
  49   1      //  ET1=0;
C51 COMPILER V9.51   UART                                                                  05/17/2019 10:28:03 PAGE 2   

  50   1      //  TR1=1;    
  51   1      //  PCON |= 0x80;   
  52   1      /*********************************************************************************************************
             -***************/
  53   1      
  54   1      
  55   1        S0CON = 0x50;  
  56   1        ES0 = 1;
  57   1      }
  58          void Uart0_PutChar(unsigned char bdat)
  59          {
  60   1        unsigned char free_space;
  61   1        unsigned char tail_tmp;
  62   1        while(1)
  63   1        {       
  64   2          tail_tmp = uart0_send.tail; 
  65   2          if(uart0_send.head < tail_tmp)
  66   2          {
  67   3            free_space = tail_tmp - uart0_send.head;
  68   3          }
  69   2          else
  70   2          {
  71   3            free_space = UART0_TX_BUF_SIZE + tail_tmp - uart0_send.head;
  72   3          }   
  73   2          if(free_space > 1)
  74   2          {
  75   3            ES0 = 0; 
  76   3            uart0_send.head++;
  77   3            uart0_send.head %= UART0_TX_BUF_SIZE;
  78   3            uart0_tx_buf[uart0_send.head] = bdat;     
  79   3            if(!uart0_tx_flag)
  80   3            {
  81   4              ES0 = 1;        
  82   4              uart0_send.tail++;
  83   4              uart0_send.tail %= UART0_TX_BUF_SIZE;   
  84   4              S0BUF=uart0_tx_buf[uart0_send.tail];        
  85   4              uart0_tx_flag = 1;    
  86   4            }
  87   3            else
  88   3            {
  89   4              ES0 = 1;  
  90   4            }     
  91   3            break;
  92   3          }
  93   2        }
  94   1      }
  95          void UART0_ISR (void) interrupt 4
  96          { 
  97   1        if(RI0)
  98   1        {
  99   2          RI0 = 0;
 100   2          uart0_rev.head++;
 101   2          uart0_rev.head %= UART0_RX_BUF_SIZE;
 102   2          uart0_rx_buf[uart0_rev.head]=S0BUF;
 103   2        }
 104   1        if(TI0)
 105   1        { 
 106   2          TI0 = 0;    
 107   2          if(uart0_send.head!=uart0_send.tail)
 108   2          {
 109   3            uart0_send.tail++;
 110   3            uart0_send.tail %= UART0_TX_BUF_SIZE;
C51 COMPILER V9.51   UART                                                                  05/17/2019 10:28:03 PAGE 3   

 111   3            S0BUF=uart0_tx_buf[uart0_send.tail];        
 112   3          }
 113   2          else
 114   2          {
 115   3            uart0_tx_flag=0;
 116   3          } 
 117   2        }
 118   1      }
 119          #endif
 120          #ifdef UART1_EN
              void Uart1_Initial(unsigned long int baudrate)
              {
                unsigned int value_temp;
              
                uart1_send.head=0;
                uart1_send.tail=0;
                uart1_rev.head=0;
                uart1_rev.tail=0;
                uart1_tx_flag=0;
              
                value_temp = 0x400 - FOSC/(baudrate*32);
              
              
                P12F = P12_UART1_RX_SETTING;
                P11F = P11_UART1_TX_SETTING;
              
              
                S1RELH = (unsigned char)(value_temp>>8);
                S1RELL = (unsigned char)(value_temp);
                
                S1CON = 0xD0;
                ES1 = 1;  
              }
              void Uart1_PutChar(unsigned char bdat)
              {
                unsigned char free_space;
                unsigned char tail_tmp;
                while(1)
                {   
                  tail_tmp = uart1_send.tail;
                  if(uart1_send.head < tail_tmp)
                  {
                    free_space = tail_tmp - uart1_send.head;
                  }
                  else
                  {
                    free_space = UART1_TX_BUF_SIZE + tail_tmp - uart1_send.head;
                  }   
                  if(free_space > 1)
                  {
                    ES1 = 0; 
                    uart1_send.head++;
                    uart1_send.head %= UART1_TX_BUF_SIZE;
                    uart1_tx_buf[uart1_send.head] = bdat;
                    if(!uart1_tx_flag)
                    {
                      ES1 = 1;
                      uart1_send.tail++;
                      uart1_send.tail %= UART1_TX_BUF_SIZE;   
                      S1BUF = uart1_tx_buf[uart1_send.tail];        
                      uart1_tx_flag = 1;    
                    }
C51 COMPILER V9.51   UART                                                                  05/17/2019 10:28:03 PAGE 4   

                    else
                    {
                      ES1 = 1;  
                    }     
                    break;
                  }
                }
              }
              void UART1_ISR (void) interrupt 6 
              {
                if(S1CON & BIT0)
                {
                  S1CON = (S1CON&~(BIT0|BIT1))|BIT0;       
                  uart1_rev.head++;
                    uart1_rev.head %= UART1_RX_BUF_SIZE;
                  uart1_rx_buf[uart1_rev.head]=S1BUF;
                }
                if(S1CON & BIT1)
                {
                  S1CON = (S1CON&~(BIT0|BIT1))|BIT1;  
                  if(uart1_send.head!=uart1_send.tail)
                  {
                    uart1_send.tail++;
                    uart1_send.tail %= UART1_TX_BUF_SIZE;
                    S1BUF=uart1_tx_buf[uart1_send.tail];        
                  }
                  else
                  {
                    uart1_tx_flag=0;
                  }   
                }
              }
              #endif
 206          
 207          #ifdef PRINT_EN
 208            #ifdef UART0_PRINT
 209              #define Uart_PutChar  Uart0_PutChar
 210            #elif defined  UART1_PRINT
                  #define Uart_PutChar  Uart1_PutChar
                #endif
 213          void UartPutStr(char *str)
 214          {
 215   1        while(*str)
 216   1        { 
 217   2          Uart_PutChar(*str++);
 218   2        }
 219   1      }
 220          void uart_printf(char *fmt,...) 
 221          {
 222   1          va_list ap;
 223   1          char xdata string[256];
 224   1          va_start(ap,fmt);
 225   1          vsprintf(string,fmt,ap);
 226   1          UartPutStr(string);
 227   1          va_end(ap);
 228   1      }
 229          #endif
 230          /*********************************************************************************************************
             -************/
 231          #endif


C51 COMPILER V9.51   UART                                                                  05/17/2019 10:28:03 PAGE 5   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    378    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    104     256
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
